Index: app/src/main/java/com/example/trubbi/fragments/MainFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.trubbi.fragments\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.Toast\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.navigation.findNavController\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.trubbi.R\r\nimport com.example.trubbi.activities.MainActivity\r\nimport com.example.trubbi.adapters.EventListAdapter\r\nimport com.example.trubbi.data.EventResponse\r\nimport com.example.trubbi.interfaces.APIEventService\r\nimport com.example.trubbi.model.EventCard\r\nimport com.example.trubbi.commons.Commons\r\nimport com.example.trubbi.data.CategoryResponse\r\nimport com.example.trubbi.services.ServiceBuilder\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\r\nimport retrofit2.Call\r\nimport retrofit2.Response\r\n\r\nclass MainFragment : Fragment() {\r\n\r\n    private lateinit var mainView: View\r\n    lateinit var recyclerView: RecyclerView\r\n    private var events: MutableList<EventCard> = ArrayList()\r\n    private lateinit var linearLayoutManager: LinearLayoutManager\r\n    private lateinit var eventListAdapter: EventListAdapter\r\n    private lateinit var extendedFab: Button\r\n    private var commons: Commons = Commons()\r\n    private var categoryTitles = arrayOf(String())\r\n    private var categoriesResponse: MutableList<CategoryResponse> = ArrayList()\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        mainView = inflater.inflate(R.layout.fragment_main, container, false)\r\n        recyclerView = mainView.findViewById(R.id.recycler_view)\r\n        extendedFab = mainView.findViewById(R.id.extended_fab)\r\n\r\n        return mainView\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n\r\n        (activity as MainActivity).supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_menu)\r\n        val toolbar =\r\n            (activity as MainActivity).findViewById<androidx.appcompat.widget.Toolbar>(R.id.main_toolbar)\r\n\r\n        toolbar.setNavigationOnClickListener {\r\n            (activity as MainActivity).drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_OPEN)\r\n            (activity as MainActivity).drawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED)\r\n        }\r\n\r\n        getEvents()\r\n        getCategories()\r\n        recyclerView.setHasFixedSize(true)\r\n        linearLayoutManager = LinearLayoutManager(context)\r\n        recyclerView.layoutManager = linearLayoutManager\r\n        eventListAdapter = EventListAdapter(events)\r\n        recyclerView.adapter = eventListAdapter\r\n\r\n    }\r\n\r\n    private fun onItemClick(position: Int): Boolean {\r\n        val categoryId = getCategoryId(position)\r\n        val actionCategory =\r\n            MainFragmentDirections.actionMainFragmentToCategoriesFragment(categoryTitles[position], categoryId)\r\n        mainView.findNavController().navigate(actionCategory)\r\n        return true\r\n    }\r\n\r\n    private fun getCategoryId(position: Int): Long {\r\n        var i = 0\r\n        var categoryId = 0L\r\n        while(i <= categoriesResponse.size && categoryTitles[position] != categoriesResponse[i].name) {\r\n            if(categoryTitles[position] == categoriesResponse[i].name){\r\n                categoryId = categoriesResponse[i].id as Long\r\n            } else {\r\n                i++\r\n            }\r\n        }\r\n        return categoryId\r\n    }\r\n\r\n    private fun getEvents(){\r\n        val apiService: APIEventService = ServiceBuilder.buildService(APIEventService::class.java)\r\n        val requestCall: Call<List<EventResponse>> = apiService.getEvents()\r\n\r\n        requestCall.enqueue(object: retrofit2.Callback<List<EventResponse>>{\r\n            @SuppressLint(\"NotifyDataSetChanged\")\r\n            override fun onResponse(call: Call<List<EventResponse>>, response: Response<List<EventResponse>>){\r\n                if(response.isSuccessful){\r\n                    val eventResponse: List<EventResponse>? = response.body()\r\n                    eventResponse?.let {\r\n                        for(i in it.indices){\r\n                            if (activity != null) {\r\n                                val event: EventResponse = it[i]\r\n                                val eventCard = commons.buildEvent(event)\r\n                                events.add(eventCard)\r\n                            }\r\n                        }\r\n                        eventListAdapter.notifyDataSetChanged()\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            override fun onFailure(call: Call<List<EventResponse>>, error: Throwable){\r\n                Toast.makeText(\r\n                    context, \"Error al cargar los eventos\",\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun getCategories(){\r\n        val apiService: APIEventService = ServiceBuilder.buildService(APIEventService::class.java)\r\n        val requestCall: Call<List<CategoryResponse>> = apiService.getCategories()\r\n\r\n        requestCall.enqueue(object: retrofit2.Callback<List<CategoryResponse>>{\r\n            @SuppressLint(\"NotifyDataSetChanged\")\r\n            override fun onResponse(call: Call<List<CategoryResponse>>, response: Response<List<CategoryResponse>>){\r\n                if(response.isSuccessful){\r\n                    val categoryResponse: List<CategoryResponse>? = response.body()\r\n                    categoryResponse?.let {\r\n                        for(i in it.indices){\r\n                            if (activity != null) {\r\n                                categoriesResponse.add(categoryResponse[i])\r\n                                categoryTitles[i] = categoryResponse[i].name\r\n                            }\r\n                        }\r\n                        fillCategoriesMenu(categoryTitles)\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            override fun onFailure(call: Call<List<CategoryResponse>>, error: Throwable){\r\n                Toast.makeText(\r\n                    context, \"Error al cargar los eventos\",\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n            }\r\n        })\r\n    }\r\n\r\n    fun fillCategoriesMenu(categoryTitles: Array<String>) {\r\n        extendedFab.setOnClickListener {\r\n            MaterialAlertDialogBuilder(requireContext())\r\n                .setTitle(resources.getString(R.string.dialogs_title))\r\n                .setItems(categoryTitles) { _, which ->\r\n                    when (which) {\r\n                        0 -> onItemClick(0)\r\n                        1 -> onItemClick(1)\r\n                        2 -> onItemClick(2)\r\n                        3 -> onItemClick(3)\r\n                        4 -> onItemClick(4)\r\n                        5 -> onItemClick(5)\r\n                        6 -> onItemClick(6)\r\n                        7 -> onItemClick(7)\r\n                        8 -> onItemClick(8)\r\n                    }\r\n                }\r\n                .show()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/trubbi/fragments/MainFragment.kt b/app/src/main/java/com/example/trubbi/fragments/MainFragment.kt
--- a/app/src/main/java/com/example/trubbi/fragments/MainFragment.kt	
+++ b/app/src/main/java/com/example/trubbi/fragments/MainFragment.kt	
@@ -73,7 +73,7 @@
     private fun onItemClick(position: Int): Boolean {
         val categoryId = getCategoryId(position)
         val actionCategory =
-            MainFragmentDirections.actionMainFragmentToCategoriesFragment(categoryTitles[position], categoryId)
+            MainFragmentDirections.actionMainFragmentToCategoriesFragment(categoryId, categoryTitles[position])
         mainView.findNavController().navigate(actionCategory)
         return true
     }
